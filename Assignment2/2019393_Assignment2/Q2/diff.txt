diff -Naur orig_linux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl linux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl
--- orig_linux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl	2020-10-17 12:01:22.000000000 +0530
+++ linux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl	2020-10-28 00:38:27.833555844 +0530
@@ -361,7 +361,7 @@
 437	common	openat2			sys_openat2
 438	common	pidfd_getfd		sys_pidfd_getfd
 439	common	faccessat2		sys_faccessat2
-
+440	common	sh_task_info		sys_sh_task_info
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
 # for native 64-bit operation. The __x32_compat_sys stubs are created
diff -Naur orig_linux-5.9.1/Makefile linux-5.9.1/Makefile
--- orig_linux-5.9.1/Makefile	2020-10-17 12:01:22.000000000 +0530
+++ linux-5.9.1/Makefile	2020-10-24 22:06:29.078280000 +0530
@@ -1094,7 +1094,7 @@
 export MODULES_NSDEPS := $(extmod-prefix)modules.nsdeps
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ sh_task_info/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff -Naur orig_linux-5.9.1/sh_task_info/Makefile linux-5.9.1/sh_task_info/Makefile
--- orig_linux-5.9.1/sh_task_info/Makefile	1970-01-01 05:30:00.000000000 +0530
+++ linux-5.9.1/sh_task_info/Makefile	2020-10-24 22:04:53.134702000 +0530
@@ -0,0 +1 @@
+obj-y := sh_task_info.o
\ No newline at end of file
diff -Naur orig_linux-5.9.1/sh_task_info/sh_task_info.c linux-5.9.1/sh_task_info/sh_task_info.c
--- orig_linux-5.9.1/sh_task_info/sh_task_info.c	1970-01-01 05:30:00.000000000 +0530
+++ linux-5.9.1/sh_task_info/sh_task_info.c	2020-10-28 18:54:23.582652875 +0530
@@ -0,0 +1,102 @@
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/syscalls.h>
+#include <linux/fs.h>
+#include <asm/segment.h>
+#include <asm/uaccess.h>
+#include <linux/buffer_head.h>
+#include <linux/module.h>
+#include <linux/linkage.h>
+#include <linux/uaccess.h>
+#include <linux/errno.h>
+#include <linux/string.h>
+SYSCALL_DEFINE3(sh_task_info,long,pid,char *,path,int,len)
+{
+    
+    // printk("Hello\n");
+    char path_buffer[1024];
+    
+    // int len = strlen(path);
+    
+    if(copy_from_user(path_buffer, path, len)){
+        printk(KERN_ALERT "Not Available \n");
+        return EFAULT;
+    }
+
+    struct task_struct* proces = find_task_by_vpid((pid_t)pid);
+    
+    if(proces==NULL){
+        printk(KERN_ALERT "Process with the given Pid does not exist\n");
+        return ESRCH;
+    }
+    
+    printk(KERN_ALERT 
+        "Process: %s\n PID_Number: %ld\n Process State: %ld\n Priority: %ld\n RT_Priority: %ld\n Static Priority: %ld\n Normal Priority: %ld\n Parent Death signal: %ld\n Process Trace: %ld\n Policy: %ld\n Exit State :%ld\n Exit Code: %ld\n Exit Signal: %ld\n Personality: %ld\n Virtual Runtime: %ld\n Atomic flags : %ld \n Parent process: %s, \n Parent PID: %ld", 
+        proces->comm, 
+        (long)task_pid_nr(proces), 
+        (long)proces->state, // -1 unrunnable, 0 runnable, >0 stopped
+        (long)proces->prio, //the priority considered by the scheduler is kept in prio.
+        (long)proces->rt_priority, //rt_priority denotes the priority of a real-time process
+        (long)proces->static_prio, 
+        (long)proces->normal_prio, //normal_priority denotes a priority that is computed based on the static priority and the scheduling policy of the process.
+        (long)proces->pdeath_signal, // The signal sent when the parent dies
+        (long)proces->ptrace, 
+        (long)proces->policy, //policy holds the scheduling policy applied to the process. 
+        (long)proces->exit_state, // how a process exited
+        (long)proces->exit_code, 
+        (long)proces->exit_signal, 
+        (long)proces->personality, // Used for emulating ABI behavior of previous Linux versions 
+        (long)proces->se.vruntime, //sched_class denotes the scheduler class the process is in.
+        (long)proces->atomic_flags, // Flags requiring atomic access
+        proces->parent->comm, 
+        (long)task_pid_nr(proces->parent) 
+    );
+    
+    
+    char file_data[2048];
+    
+    // int i=0;
+    // for( i=0;i<2048;i++) 
+    //     buffer[i]=0;
+    
+    sprintf(
+        file_data,
+        "Process: %s\n PID_Number: %ld\n Process State: %ld\n Priority: %ld\n RT_Priority: %ld\n Static Priority: %ld\n Normal Priority: %ld\n Parent Death signal: %ld\n pTrace: %ld\n Policy: %ld\n Exit State :%ld\n Exit Code: %ld\n Exit Signal: %ld\n Personality: %ld\n Virtual runtime: %ld\n Atomic flags : %ld \n", 
+        proces->comm, 
+        (long)task_pid_nr(proces), 
+        (long)proces->state, 
+        (long)proces->prio, 
+        (long)proces->rt_priority, 
+        (long)proces->static_prio, 
+        (long)proces->normal_prio, 
+        (long)proces->pdeath_signal, 
+        (long)proces->ptrace, 
+        (long)proces->policy, 
+        (long)proces->exit_state, 
+        (long)proces->exit_code, 
+        (long)proces->exit_signal, 
+        (long)proces->personality, 
+        (long)proces->se.vruntime,
+        (long)proces->atomic_flags 
+    );
+    
+    struct file* destFile;
+    
+    destFile = filp_open(path_buffer,  O_WRONLY | O_APPEND | O_CREAT, 0666);
+    
+    if (IS_ERR(destFile) || destFile == NULL) {
+        printk(KERN_ALERT "Cannot open destination file");
+        return ENOENT;
+    }
+
+    ssize_t rk = kernel_write(destFile, file_data, strlen(file_data), &destFile->f_pos);
+
+    if(rk < strlen(file_data)){
+        return -1;
+    }
+
+    filp_close(destFile,NULL);
+
+    return 0;
+}
diff -Naur orig_linux-5.9.1/tools/perf/arch/x86/entry/syscalls/syscall_64.tbl linux-5.9.1/tools/perf/arch/x86/entry/syscalls/syscall_64.tbl
--- orig_linux-5.9.1/tools/perf/arch/x86/entry/syscalls/syscall_64.tbl	2020-10-17 12:01:22.000000000 +0530
+++ linux-5.9.1/tools/perf/arch/x86/entry/syscalls/syscall_64.tbl	2020-10-28 00:39:21.925700629 +0530
@@ -361,7 +361,7 @@
 437	common	openat2			sys_openat2
 438	common	pidfd_getfd		sys_pidfd_getfd
 439	common	faccessat2		sys_faccessat2
-
+440	common	sh_task_info		sys_sh_task_info
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
 # for native 64-bit operation. The __x32_compat_sys stubs are created
